{
  "version": 3,
  "sources": ["../../date-fns/differenceInDays.mjs"],
  "sourcesContent": ["import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name differenceInDays\r\n * @category Day Helpers\r\n * @summary Get the number of full days between the given dates.\r\n *\r\n * @description\r\n * Get the number of full day periods between two dates. Fractional days are\r\n * truncated towards zero.\r\n *\r\n * One \"full day\" is the distance between a local time in one day to the same\r\n * local time on the next or previous day. A full day can sometimes be less than\r\n * or more than 24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 24-hour periods, use this instead:\r\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n *\r\n * @returns The number of full days according to the local timezone\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 365\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 0\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 92 days, even in\r\n * // time zones where DST starts and the\r\n * // period has only 92*24-1 hours.\r\n * const result = differenceInDays(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 1)\r\n * )\r\n * //=> 92\r\n */\r\nexport function differenceInDays(dateLeft, dateRight) {\r\n  const _dateLeft = toDate(dateLeft);\r\n  const _dateRight = toDate(dateRight);\r\n\r\n  const sign = compareLocalAsc(_dateLeft, _dateRight);\r\n  const difference = Math.abs(differenceInCalendarDays(_dateLeft, _dateRight));\r\n\r\n  _dateLeft.setDate(_dateLeft.getDate() - sign * difference);\r\n\r\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\r\n  // If so, result must be decreased by 1 in absolute value\r\n  const isLastDayNotFull = Number(\r\n    compareLocalAsc(_dateLeft, _dateRight) === -sign,\r\n  );\r\n  const result = sign * (difference - isLastDayNotFull);\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Like `compareAsc` but uses local time not UTC, which is needed\r\n// for accurate equality comparisons of UTC timestamps that end up\r\n// having the same representation in local time, e.g. one hour before\r\n// DST ends vs. the instant that DST ends.\r\nfunction compareLocalAsc(dateLeft, dateRight) {\r\n  const diff =\r\n    dateLeft.getFullYear() - dateRight.getFullYear() ||\r\n    dateLeft.getMonth() - dateRight.getMonth() ||\r\n    dateLeft.getDate() - dateRight.getDate() ||\r\n    dateLeft.getHours() - dateRight.getHours() ||\r\n    dateLeft.getMinutes() - dateRight.getMinutes() ||\r\n    dateLeft.getSeconds() - dateRight.getSeconds() ||\r\n    dateLeft.getMilliseconds() - dateRight.getMilliseconds();\r\n\r\n  if (diff < 0) {\r\n    return -1;\r\n  } else if (diff > 0) {\r\n    return 1;\r\n    // Return 0 if diff is 0; return NaN if diff is NaN\r\n  } else {\r\n    return diff;\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInDays;\r\n"],
  "mappings": ";;;;;;AAyDO,SAAS,iBAAiB,UAAU,WAAW;AACpD,QAAM,YAAY,OAAO,QAAQ;AACjC,QAAM,aAAa,OAAO,SAAS;AAEnC,QAAM,OAAO,gBAAgB,WAAW,UAAU;AAClD,QAAM,aAAa,KAAK,IAAI,yBAAyB,WAAW,UAAU,CAAC;AAE3E,YAAU,QAAQ,UAAU,QAAQ,IAAI,OAAO,UAAU;AAIzD,QAAM,mBAAmB;AAAA,IACvB,gBAAgB,WAAW,UAAU,MAAM,CAAC;AAAA,EAC9C;AACA,QAAM,SAAS,QAAQ,aAAa;AAEpC,SAAO,WAAW,IAAI,IAAI;AAC5B;AAMA,SAAS,gBAAgB,UAAU,WAAW;AAC5C,QAAM,OACJ,SAAS,YAAY,IAAI,UAAU,YAAY,KAC/C,SAAS,SAAS,IAAI,UAAU,SAAS,KACzC,SAAS,QAAQ,IAAI,UAAU,QAAQ,KACvC,SAAS,SAAS,IAAI,UAAU,SAAS,KACzC,SAAS,WAAW,IAAI,UAAU,WAAW,KAC7C,SAAS,WAAW,IAAI,UAAU,WAAW,KAC7C,SAAS,gBAAgB,IAAI,UAAU,gBAAgB;AAEzD,MAAI,OAAO,GAAG;AACZ,WAAO;AAAA,EACT,WAAW,OAAO,GAAG;AACnB,WAAO;AAAA,EAET,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAGA,IAAO,2BAAQ;",
  "names": []
}
