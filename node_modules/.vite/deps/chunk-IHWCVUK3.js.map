{
  "version": 3,
  "sources": ["../../date-fns/locale/en-US/_lib/formatDistance.mjs", "../../date-fns/locale/_lib/buildFormatLongFn.mjs", "../../date-fns/locale/en-US/_lib/formatLong.mjs", "../../date-fns/locale/en-US/_lib/formatRelative.mjs", "../../date-fns/locale/_lib/buildLocalizeFn.mjs", "../../date-fns/locale/en-US/_lib/localize.mjs", "../../date-fns/locale/_lib/buildMatchFn.mjs", "../../date-fns/locale/_lib/buildMatchPatternFn.mjs", "../../date-fns/locale/en-US/_lib/match.mjs", "../../date-fns/locale/en-US.mjs", "../../date-fns/_lib/defaultOptions.mjs", "../../date-fns/constructFrom.mjs", "../../date-fns/startOfYear.mjs", "../../date-fns/getDayOfYear.mjs", "../../date-fns/startOfWeek.mjs", "../../date-fns/startOfISOWeek.mjs", "../../date-fns/getISOWeekYear.mjs", "../../date-fns/startOfISOWeekYear.mjs", "../../date-fns/getISOWeek.mjs", "../../date-fns/getWeekYear.mjs", "../../date-fns/startOfWeekYear.mjs", "../../date-fns/getWeek.mjs", "../../date-fns/_lib/addLeadingZeros.mjs", "../../date-fns/_lib/format/lightFormatters.mjs", "../../date-fns/_lib/format/formatters.mjs", "../../date-fns/_lib/format/longFormatters.mjs", "../../date-fns/_lib/protectedTokens.mjs", "../../date-fns/isDate.mjs", "../../date-fns/isValid.mjs", "../../date-fns/format.mjs"],
  "sourcesContent": ["const formatDistanceLocale = {\r\n  lessThanXSeconds: {\r\n    one: \"less than a second\",\r\n    other: \"less than {{count}} seconds\",\r\n  },\r\n\r\n  xSeconds: {\r\n    one: \"1 second\",\r\n    other: \"{{count}} seconds\",\r\n  },\r\n\r\n  halfAMinute: \"half a minute\",\r\n\r\n  lessThanXMinutes: {\r\n    one: \"less than a minute\",\r\n    other: \"less than {{count}} minutes\",\r\n  },\r\n\r\n  xMinutes: {\r\n    one: \"1 minute\",\r\n    other: \"{{count}} minutes\",\r\n  },\r\n\r\n  aboutXHours: {\r\n    one: \"about 1 hour\",\r\n    other: \"about {{count}} hours\",\r\n  },\r\n\r\n  xHours: {\r\n    one: \"1 hour\",\r\n    other: \"{{count}} hours\",\r\n  },\r\n\r\n  xDays: {\r\n    one: \"1 day\",\r\n    other: \"{{count}} days\",\r\n  },\r\n\r\n  aboutXWeeks: {\r\n    one: \"about 1 week\",\r\n    other: \"about {{count}} weeks\",\r\n  },\r\n\r\n  xWeeks: {\r\n    one: \"1 week\",\r\n    other: \"{{count}} weeks\",\r\n  },\r\n\r\n  aboutXMonths: {\r\n    one: \"about 1 month\",\r\n    other: \"about {{count}} months\",\r\n  },\r\n\r\n  xMonths: {\r\n    one: \"1 month\",\r\n    other: \"{{count}} months\",\r\n  },\r\n\r\n  aboutXYears: {\r\n    one: \"about 1 year\",\r\n    other: \"about {{count}} years\",\r\n  },\r\n\r\n  xYears: {\r\n    one: \"1 year\",\r\n    other: \"{{count}} years\",\r\n  },\r\n\r\n  overXYears: {\r\n    one: \"over 1 year\",\r\n    other: \"over {{count}} years\",\r\n  },\r\n\r\n  almostXYears: {\r\n    one: \"almost 1 year\",\r\n    other: \"almost {{count}} years\",\r\n  },\r\n};\r\n\r\nexport const formatDistance = (token, count, options) => {\r\n  let result;\r\n\r\n  const tokenValue = formatDistanceLocale[token];\r\n  if (typeof tokenValue === \"string\") {\r\n    result = tokenValue;\r\n  } else if (count === 1) {\r\n    result = tokenValue.one;\r\n  } else {\r\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\r\n  }\r\n\r\n  if (options?.addSuffix) {\r\n    if (options.comparison && options.comparison > 0) {\r\n      return \"in \" + result;\r\n    } else {\r\n      return result + \" ago\";\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n", "export function buildFormatLongFn(args) {\r\n  return (options = {}) => {\r\n    // TODO: Remove String()\r\n    const width = options.width ? String(options.width) : args.defaultWidth;\r\n    const format = args.formats[width] || args.formats[args.defaultWidth];\r\n    return format;\r\n  };\r\n}\r\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\r\n\r\nconst dateFormats = {\r\n  full: \"EEEE, MMMM do, y\",\r\n  long: \"MMMM do, y\",\r\n  medium: \"MMM d, y\",\r\n  short: \"MM/dd/yyyy\",\r\n};\r\n\r\nconst timeFormats = {\r\n  full: \"h:mm:ss a zzzz\",\r\n  long: \"h:mm:ss a z\",\r\n  medium: \"h:mm:ss a\",\r\n  short: \"h:mm a\",\r\n};\r\n\r\nconst dateTimeFormats = {\r\n  full: \"{{date}} 'at' {{time}}\",\r\n  long: \"{{date}} 'at' {{time}}\",\r\n  medium: \"{{date}}, {{time}}\",\r\n  short: \"{{date}}, {{time}}\",\r\n};\r\n\r\nexport const formatLong = {\r\n  date: buildFormatLongFn({\r\n    formats: dateFormats,\r\n    defaultWidth: \"full\",\r\n  }),\r\n\r\n  time: buildFormatLongFn({\r\n    formats: timeFormats,\r\n    defaultWidth: \"full\",\r\n  }),\r\n\r\n  dateTime: buildFormatLongFn({\r\n    formats: dateTimeFormats,\r\n    defaultWidth: \"full\",\r\n  }),\r\n};\r\n", "const formatRelativeLocale = {\r\n  lastWeek: \"'last' eeee 'at' p\",\r\n  yesterday: \"'yesterday at' p\",\r\n  today: \"'today at' p\",\r\n  tomorrow: \"'tomorrow at' p\",\r\n  nextWeek: \"eeee 'at' p\",\r\n  other: \"P\",\r\n};\r\n\r\nexport const formatRelative = (token, _date, _baseDate, _options) =>\r\n  formatRelativeLocale[token];\r\n", "/* eslint-disable no-unused-vars */\r\n\r\n/**\r\n * The localize function argument callback which allows to convert raw value to\r\n * the actual type.\r\n *\r\n * @param value - The value to convert\r\n *\r\n * @returns The converted value\r\n */\r\n\r\n/**\r\n * The map of localized values for each width.\r\n */\r\n\r\n/**\r\n * The index type of the locale unit value. It types conversion of units of\r\n * values that don't start at 0 (i.e. quarters).\r\n */\r\n\r\n/**\r\n * Converts the unit value to the tuple of values.\r\n */\r\n\r\n/**\r\n * The tuple of localized era values. The first element represents BC,\r\n * the second element represents AD.\r\n */\r\n\r\n/**\r\n * The tuple of localized quarter values. The first element represents Q1.\r\n */\r\n\r\n/**\r\n * The tuple of localized day values. The first element represents Sunday.\r\n */\r\n\r\n/**\r\n * The tuple of localized month values. The first element represents January.\r\n */\r\n\r\nexport function buildLocalizeFn(args) {\r\n  return (value, options) => {\r\n    const context = options?.context ? String(options.context) : \"standalone\";\r\n\r\n    let valuesArray;\r\n    if (context === \"formatting\" && args.formattingValues) {\r\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\r\n      const width = options?.width ? String(options.width) : defaultWidth;\r\n\r\n      valuesArray =\r\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\r\n    } else {\r\n      const defaultWidth = args.defaultWidth;\r\n      const width = options?.width ? String(options.width) : args.defaultWidth;\r\n\r\n      valuesArray = args.values[width] || args.values[defaultWidth];\r\n    }\r\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\r\n\r\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\r\n    return valuesArray[index];\r\n  };\r\n}\r\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\r\n\r\nconst eraValues = {\r\n  narrow: [\"B\", \"A\"],\r\n  abbreviated: [\"BC\", \"AD\"],\r\n  wide: [\"Before Christ\", \"Anno Domini\"],\r\n};\r\n\r\nconst quarterValues = {\r\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\r\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\r\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\r\n};\r\n\r\n// Note: in English, the names of days of the week and months are capitalized.\r\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\r\n// Generally, formatted dates should look like they are in the middle of a sentence,\r\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\r\nconst monthValues = {\r\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\r\n  abbreviated: [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ],\r\n\r\n  wide: [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ],\r\n};\r\n\r\nconst dayValues = {\r\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\r\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n  wide: [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ],\r\n};\r\n\r\nconst dayPeriodValues = {\r\n  narrow: {\r\n    am: \"a\",\r\n    pm: \"p\",\r\n    midnight: \"mi\",\r\n    noon: \"n\",\r\n    morning: \"morning\",\r\n    afternoon: \"afternoon\",\r\n    evening: \"evening\",\r\n    night: \"night\",\r\n  },\r\n  abbreviated: {\r\n    am: \"AM\",\r\n    pm: \"PM\",\r\n    midnight: \"midnight\",\r\n    noon: \"noon\",\r\n    morning: \"morning\",\r\n    afternoon: \"afternoon\",\r\n    evening: \"evening\",\r\n    night: \"night\",\r\n  },\r\n  wide: {\r\n    am: \"a.m.\",\r\n    pm: \"p.m.\",\r\n    midnight: \"midnight\",\r\n    noon: \"noon\",\r\n    morning: \"morning\",\r\n    afternoon: \"afternoon\",\r\n    evening: \"evening\",\r\n    night: \"night\",\r\n  },\r\n};\r\n\r\nconst formattingDayPeriodValues = {\r\n  narrow: {\r\n    am: \"a\",\r\n    pm: \"p\",\r\n    midnight: \"mi\",\r\n    noon: \"n\",\r\n    morning: \"in the morning\",\r\n    afternoon: \"in the afternoon\",\r\n    evening: \"in the evening\",\r\n    night: \"at night\",\r\n  },\r\n  abbreviated: {\r\n    am: \"AM\",\r\n    pm: \"PM\",\r\n    midnight: \"midnight\",\r\n    noon: \"noon\",\r\n    morning: \"in the morning\",\r\n    afternoon: \"in the afternoon\",\r\n    evening: \"in the evening\",\r\n    night: \"at night\",\r\n  },\r\n  wide: {\r\n    am: \"a.m.\",\r\n    pm: \"p.m.\",\r\n    midnight: \"midnight\",\r\n    noon: \"noon\",\r\n    morning: \"in the morning\",\r\n    afternoon: \"in the afternoon\",\r\n    evening: \"in the evening\",\r\n    night: \"at night\",\r\n  },\r\n};\r\n\r\nconst ordinalNumber = (dirtyNumber, _options) => {\r\n  const number = Number(dirtyNumber);\r\n\r\n  // If ordinal numbers depend on context, for example,\r\n  // if they are different for different grammatical genders,\r\n  // use `options.unit`.\r\n  //\r\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\r\n  // 'day', 'hour', 'minute', 'second'.\r\n\r\n  const rem100 = number % 100;\r\n  if (rem100 > 20 || rem100 < 10) {\r\n    switch (rem100 % 10) {\r\n      case 1:\r\n        return number + \"st\";\r\n      case 2:\r\n        return number + \"nd\";\r\n      case 3:\r\n        return number + \"rd\";\r\n    }\r\n  }\r\n  return number + \"th\";\r\n};\r\n\r\nexport const localize = {\r\n  ordinalNumber,\r\n\r\n  era: buildLocalizeFn({\r\n    values: eraValues,\r\n    defaultWidth: \"wide\",\r\n  }),\r\n\r\n  quarter: buildLocalizeFn({\r\n    values: quarterValues,\r\n    defaultWidth: \"wide\",\r\n    argumentCallback: (quarter) => quarter - 1,\r\n  }),\r\n\r\n  month: buildLocalizeFn({\r\n    values: monthValues,\r\n    defaultWidth: \"wide\",\r\n  }),\r\n\r\n  day: buildLocalizeFn({\r\n    values: dayValues,\r\n    defaultWidth: \"wide\",\r\n  }),\r\n\r\n  dayPeriod: buildLocalizeFn({\r\n    values: dayPeriodValues,\r\n    defaultWidth: \"wide\",\r\n    formattingValues: formattingDayPeriodValues,\r\n    defaultFormattingWidth: \"wide\",\r\n  }),\r\n};\r\n", "export function buildMatchFn(args) {\r\n  return (string, options = {}) => {\r\n    const width = options.width;\r\n\r\n    const matchPattern =\r\n      (width && args.matchPatterns[width]) ||\r\n      args.matchPatterns[args.defaultMatchWidth];\r\n    const matchResult = string.match(matchPattern);\r\n\r\n    if (!matchResult) {\r\n      return null;\r\n    }\r\n    const matchedString = matchResult[0];\r\n\r\n    const parsePatterns =\r\n      (width && args.parsePatterns[width]) ||\r\n      args.parsePatterns[args.defaultParseWidth];\r\n\r\n    const key = Array.isArray(parsePatterns)\r\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\r\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\r\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\r\n\r\n    let value;\r\n\r\n    value = args.valueCallback ? args.valueCallback(key) : key;\r\n    value = options.valueCallback\r\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\r\n        options.valueCallback(value)\r\n      : value;\r\n\r\n    const rest = string.slice(matchedString.length);\r\n\r\n    return { value, rest };\r\n  };\r\n}\r\n\r\nfunction findKey(object, predicate) {\r\n  for (const key in object) {\r\n    if (\r\n      Object.prototype.hasOwnProperty.call(object, key) &&\r\n      predicate(object[key])\r\n    ) {\r\n      return key;\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction findIndex(array, predicate) {\r\n  for (let key = 0; key < array.length; key++) {\r\n    if (predicate(array[key])) {\r\n      return key;\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n", "export function buildMatchPatternFn(args) {\r\n  return (string, options = {}) => {\r\n    const matchResult = string.match(args.matchPattern);\r\n    if (!matchResult) return null;\r\n    const matchedString = matchResult[0];\r\n\r\n    const parseResult = string.match(args.parsePattern);\r\n    if (!parseResult) return null;\r\n    let value = args.valueCallback\r\n      ? args.valueCallback(parseResult[0])\r\n      : parseResult[0];\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\r\n    value = options.valueCallback ? options.valueCallback(value) : value;\r\n\r\n    const rest = string.slice(matchedString.length);\r\n\r\n    return { value, rest };\r\n  };\r\n}\r\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\r\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\r\n\r\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\r\nconst parseOrdinalNumberPattern = /\\d+/i;\r\n\r\nconst matchEraPatterns = {\r\n  narrow: /^(b|a)/i,\r\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\r\n  wide: /^(before christ|before common era|anno domini|common era)/i,\r\n};\r\nconst parseEraPatterns = {\r\n  any: [/^b/i, /^(a|c)/i],\r\n};\r\n\r\nconst matchQuarterPatterns = {\r\n  narrow: /^[1234]/i,\r\n  abbreviated: /^q[1234]/i,\r\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\r\n};\r\nconst parseQuarterPatterns = {\r\n  any: [/1/i, /2/i, /3/i, /4/i],\r\n};\r\n\r\nconst matchMonthPatterns = {\r\n  narrow: /^[jfmasond]/i,\r\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\r\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\r\n};\r\nconst parseMonthPatterns = {\r\n  narrow: [\r\n    /^j/i,\r\n    /^f/i,\r\n    /^m/i,\r\n    /^a/i,\r\n    /^m/i,\r\n    /^j/i,\r\n    /^j/i,\r\n    /^a/i,\r\n    /^s/i,\r\n    /^o/i,\r\n    /^n/i,\r\n    /^d/i,\r\n  ],\r\n\r\n  any: [\r\n    /^ja/i,\r\n    /^f/i,\r\n    /^mar/i,\r\n    /^ap/i,\r\n    /^may/i,\r\n    /^jun/i,\r\n    /^jul/i,\r\n    /^au/i,\r\n    /^s/i,\r\n    /^o/i,\r\n    /^n/i,\r\n    /^d/i,\r\n  ],\r\n};\r\n\r\nconst matchDayPatterns = {\r\n  narrow: /^[smtwf]/i,\r\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\r\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\r\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\r\n};\r\nconst parseDayPatterns = {\r\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\r\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\r\n};\r\n\r\nconst matchDayPeriodPatterns = {\r\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\r\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\r\n};\r\nconst parseDayPeriodPatterns = {\r\n  any: {\r\n    am: /^a/i,\r\n    pm: /^p/i,\r\n    midnight: /^mi/i,\r\n    noon: /^no/i,\r\n    morning: /morning/i,\r\n    afternoon: /afternoon/i,\r\n    evening: /evening/i,\r\n    night: /night/i,\r\n  },\r\n};\r\n\r\nexport const match = {\r\n  ordinalNumber: buildMatchPatternFn({\r\n    matchPattern: matchOrdinalNumberPattern,\r\n    parsePattern: parseOrdinalNumberPattern,\r\n    valueCallback: (value) => parseInt(value, 10),\r\n  }),\r\n\r\n  era: buildMatchFn({\r\n    matchPatterns: matchEraPatterns,\r\n    defaultMatchWidth: \"wide\",\r\n    parsePatterns: parseEraPatterns,\r\n    defaultParseWidth: \"any\",\r\n  }),\r\n\r\n  quarter: buildMatchFn({\r\n    matchPatterns: matchQuarterPatterns,\r\n    defaultMatchWidth: \"wide\",\r\n    parsePatterns: parseQuarterPatterns,\r\n    defaultParseWidth: \"any\",\r\n    valueCallback: (index) => index + 1,\r\n  }),\r\n\r\n  month: buildMatchFn({\r\n    matchPatterns: matchMonthPatterns,\r\n    defaultMatchWidth: \"wide\",\r\n    parsePatterns: parseMonthPatterns,\r\n    defaultParseWidth: \"any\",\r\n  }),\r\n\r\n  day: buildMatchFn({\r\n    matchPatterns: matchDayPatterns,\r\n    defaultMatchWidth: \"wide\",\r\n    parsePatterns: parseDayPatterns,\r\n    defaultParseWidth: \"any\",\r\n  }),\r\n\r\n  dayPeriod: buildMatchFn({\r\n    matchPatterns: matchDayPeriodPatterns,\r\n    defaultMatchWidth: \"any\",\r\n    parsePatterns: parseDayPeriodPatterns,\r\n    defaultParseWidth: \"any\",\r\n  }),\r\n};\r\n", "import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\r\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\r\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\r\nimport { localize } from \"./en-US/_lib/localize.mjs\";\r\nimport { match } from \"./en-US/_lib/match.mjs\";\r\n\r\n/**\r\n * @category Locales\r\n * @summary English locale (United States).\r\n * @language English\r\n * @iso-639-2 eng\r\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\r\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\r\n */\r\nexport const enUS = {\r\n  code: \"en-US\",\r\n  formatDistance: formatDistance,\r\n  formatLong: formatLong,\r\n  formatRelative: formatRelative,\r\n  localize: localize,\r\n  match: match,\r\n  options: {\r\n    weekStartsOn: 0 /* Sunday */,\r\n    firstWeekContainsDate: 1,\r\n  },\r\n};\r\n\r\n// Fallback for modularized imports:\r\nexport default enUS;\r\n", "let defaultOptions = {};\r\n\r\nexport function getDefaultOptions() {\r\n  return defaultOptions;\r\n}\r\n\r\nexport function setDefaultOptions(newOptions) {\r\n  defaultOptions = newOptions;\r\n}\r\n", "/**\r\n * @name constructFrom\r\n * @category Generic Helpers\r\n * @summary Constructs a date using the reference date and the value\r\n *\r\n * @description\r\n * The function constructs a new date using the constructor from the reference\r\n * date and the given value. It helps to build generic functions that accept\r\n * date extensions.\r\n *\r\n * It defaults to `Date` if the passed reference date is a number or a string.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The reference date to take constructor from\r\n * @param value - The value to create the date\r\n *\r\n * @returns Date initialized using the given date and value\r\n *\r\n * @example\r\n * import { constructFrom } from 'date-fns'\r\n *\r\n * // A function that clones a date preserving the original type\r\n * function cloneDate<DateType extends Date(date: DateType): DateType {\r\n *   return constructFrom(\r\n *     date, // Use contrustor from the given date\r\n *     date.getTime() // Use the date value to create a new date\r\n *   )\r\n * }\r\n */\r\nexport function constructFrom(date, value) {\r\n  if (date instanceof Date) {\r\n    return new date.constructor(value);\r\n  } else {\r\n    return new Date(value);\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default constructFrom;\r\n", "import { toDate } from \"./toDate.mjs\";\r\nimport { constructFrom } from \"./constructFrom.mjs\";\r\n\r\n/**\r\n * @name startOfYear\r\n * @category Year Helpers\r\n * @summary Return the start of a year for the given date.\r\n *\r\n * @description\r\n * Return the start of a year for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n *\r\n * @returns The start of a year\r\n *\r\n * @example\r\n * // The start of a year for 2 September 2014 11:55:00:\r\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\r\n * //=> Wed Jan 01 2014 00:00:00\r\n */\r\nexport function startOfYear(date) {\r\n  const cleanDate = toDate(date);\r\n  const _date = constructFrom(date, 0);\r\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\r\n  _date.setHours(0, 0, 0, 0);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfYear;\r\n", "import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\r\nimport { startOfYear } from \"./startOfYear.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name getDayOfYear\r\n * @category Day Helpers\r\n * @summary Get the day of the year of the given date.\r\n *\r\n * @description\r\n * Get the day of the year of the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The day of year\r\n *\r\n * @example\r\n * // Which day of the year is 2 July 2014?\r\n * const result = getDayOfYear(new Date(2014, 6, 2))\r\n * //=> 183\r\n */\r\nexport function getDayOfYear(date) {\r\n  const _date = toDate(date);\r\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\r\n  const dayOfYear = diff + 1;\r\n  return dayOfYear;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getDayOfYear;\r\n", "import { toDate } from \"./toDate.mjs\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\r\n\r\n/**\r\n * The {@link startOfWeek} function options.\r\n */\r\n\r\n/**\r\n * @name startOfWeek\r\n * @category Week Helpers\r\n * @summary Return the start of a week for the given date.\r\n *\r\n * @description\r\n * Return the start of a week for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The start of a week\r\n *\r\n * @example\r\n * // The start of a week for 2 September 2014 11:55:00:\r\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\r\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\r\n * //=> Mon Sep 01 2014 00:00:00\r\n */\r\nexport function startOfWeek(date, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const weekStartsOn =\r\n    options?.weekStartsOn ??\r\n    options?.locale?.options?.weekStartsOn ??\r\n    defaultOptions.weekStartsOn ??\r\n    defaultOptions.locale?.options?.weekStartsOn ??\r\n    0;\r\n\r\n  const _date = toDate(date);\r\n  const day = _date.getDay();\r\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\r\n\r\n  _date.setDate(_date.getDate() - diff);\r\n  _date.setHours(0, 0, 0, 0);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfWeek;\r\n", "import { startOfWeek } from \"./startOfWeek.mjs\";\r\n\r\n/**\r\n * @name startOfISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Return the start of an ISO week for the given date.\r\n *\r\n * @description\r\n * Return the start of an ISO week for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n *\r\n * @returns The start of an ISO week\r\n *\r\n * @example\r\n * // The start of an ISO week for 2 September 2014 11:55:00:\r\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Mon Sep 01 2014 00:00:00\r\n */\r\nexport function startOfISOWeek(date) {\r\n  return startOfWeek(date, { weekStartsOn: 1 });\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfISOWeek;\r\n", "import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name getISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the ISO week-numbering year of the given date,\r\n * which always starts 3 days before the year's first Thursday.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The ISO week-numbering year\r\n *\r\n * @example\r\n * // Which ISO-week numbering year is 2 January 2005?\r\n * const result = getISOWeekYear(new Date(2005, 0, 2))\r\n * //=> 2004\r\n */\r\nexport function getISOWeekYear(date) {\r\n  const _date = toDate(date);\r\n  const year = _date.getFullYear();\r\n\r\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\r\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\r\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\r\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\r\n\r\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\r\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\r\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\r\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\r\n\r\n  if (_date.getTime() >= startOfNextYear.getTime()) {\r\n    return year + 1;\r\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\r\n    return year;\r\n  } else {\r\n    return year - 1;\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getISOWeekYear;\r\n", "import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\r\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\r\nimport { constructFrom } from \"./constructFrom.mjs\";\r\n\r\n/**\r\n * @name startOfISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Return the start of an ISO week-numbering year for the given date.\r\n *\r\n * @description\r\n * Return the start of an ISO week-numbering year,\r\n * which always starts 3 days before the year's first Thursday.\r\n * The result will be in the local timezone.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n *\r\n * @returns The start of an ISO week-numbering year\r\n *\r\n * @example\r\n * // The start of an ISO week-numbering year for 2 July 2005:\r\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\r\n * //=> Mon Jan 03 2005 00:00:00\r\n */\r\nexport function startOfISOWeekYear(date) {\r\n  const year = getISOWeekYear(date);\r\n  const fourthOfJanuary = constructFrom(date, 0);\r\n  fourthOfJanuary.setFullYear(year, 0, 4);\r\n  fourthOfJanuary.setHours(0, 0, 0, 0);\r\n  return startOfISOWeek(fourthOfJanuary);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfISOWeekYear;\r\n", "import { millisecondsInWeek } from \"./constants.mjs\";\r\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\r\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name getISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Get the ISO week of the given date.\r\n *\r\n * @description\r\n * Get the ISO week of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The ISO week\r\n *\r\n * @example\r\n * // Which week of the ISO-week numbering year is 2 January 2005?\r\n * const result = getISOWeek(new Date(2005, 0, 2))\r\n * //=> 53\r\n */\r\nexport function getISOWeek(date) {\r\n  const _date = toDate(date);\r\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\r\n\r\n  // Round the number of weeks to the nearest integer because the number of\r\n  // milliseconds in a week is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round(diff / millisecondsInWeek) + 1;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getISOWeek;\r\n", "import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { startOfWeek } from \"./startOfWeek.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\r\n\r\n/**\r\n * The {@link getWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name getWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Get the local week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the local week-numbering year of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The local week-numbering year\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 with the default settings?\r\n * const result = getWeekYear(new Date(2004, 11, 26))\r\n * //=> 2005\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\r\n * //=> 2004\r\n *\r\n * @example\r\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\r\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\r\n * //=> 2004\r\n */\r\nexport function getWeekYear(date, options) {\r\n  const _date = toDate(date);\r\n  const year = _date.getFullYear();\r\n\r\n  const defaultOptions = getDefaultOptions();\r\n  const firstWeekContainsDate =\r\n    options?.firstWeekContainsDate ??\r\n    options?.locale?.options?.firstWeekContainsDate ??\r\n    defaultOptions.firstWeekContainsDate ??\r\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\r\n    1;\r\n\r\n  const firstWeekOfNextYear = constructFrom(date, 0);\r\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\r\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\r\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\r\n\r\n  const firstWeekOfThisYear = constructFrom(date, 0);\r\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\r\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\r\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\r\n\r\n  if (_date.getTime() >= startOfNextYear.getTime()) {\r\n    return year + 1;\r\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\r\n    return year;\r\n  } else {\r\n    return year - 1;\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getWeekYear;\r\n", "import { constructFrom } from \"./constructFrom.mjs\";\r\nimport { getWeekYear } from \"./getWeekYear.mjs\";\r\nimport { startOfWeek } from \"./startOfWeek.mjs\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\r\n\r\n/**\r\n * The {@link startOfWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name startOfWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Return the start of a local week-numbering year for the given date.\r\n *\r\n * @description\r\n * Return the start of a local week-numbering year.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The start of a week-numbering year\r\n *\r\n * @example\r\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\r\n * const result = startOfWeekYear(new Date(2005, 6, 2))\r\n * //=> Sun Dec 26 2004 00:00:00\r\n *\r\n * @example\r\n * // The start of a week-numbering year for 2 July 2005\r\n * // if Monday is the first day of week\r\n * // and 4 January is always in the first week of the year:\r\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> Mon Jan 03 2005 00:00:00\r\n */\r\nexport function startOfWeekYear(date, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const firstWeekContainsDate =\r\n    options?.firstWeekContainsDate ??\r\n    options?.locale?.options?.firstWeekContainsDate ??\r\n    defaultOptions.firstWeekContainsDate ??\r\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\r\n    1;\r\n\r\n  const year = getWeekYear(date, options);\r\n  const firstWeek = constructFrom(date, 0);\r\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\r\n  firstWeek.setHours(0, 0, 0, 0);\r\n  const _date = startOfWeek(firstWeek, options);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfWeekYear;\r\n", "import { millisecondsInWeek } from \"./constants.mjs\";\r\nimport { startOfWeek } from \"./startOfWeek.mjs\";\r\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link getWeek} function options.\r\n */\r\n\r\n/**\r\n * @name getWeek\r\n * @category Week Helpers\r\n * @summary Get the local week index of the given date.\r\n *\r\n * @description\r\n * Get the local week index of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options\r\n *\r\n * @returns The week\r\n *\r\n * @example\r\n * // Which week of the local week numbering year is 2 January 2005 with default options?\r\n * const result = getWeek(new Date(2005, 0, 2))\r\n * //=> 2\r\n *\r\n * @example\r\n * // Which week of the local week numbering year is 2 January 2005,\r\n * // if Monday is the first day of the week,\r\n * // and the first week of the year always contains 4 January?\r\n * const result = getWeek(new Date(2005, 0, 2), {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> 53\r\n */\r\n\r\nexport function getWeek(date, options) {\r\n  const _date = toDate(date);\r\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\r\n\r\n  // Round the number of weeks to the nearest integer because the number of\r\n  // milliseconds in a week is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round(diff / millisecondsInWeek) + 1;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getWeek;\r\n", "export function addLeadingZeros(number, targetLength) {\r\n  const sign = number < 0 ? \"-\" : \"\";\r\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\r\n  return sign + output;\r\n}\r\n", "import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\r\n\r\n/*\r\n * |     | Unit                           |     | Unit                           |\r\n * |-----|--------------------------------|-----|--------------------------------|\r\n * |  a  | AM, PM                         |  A* |                                |\r\n * |  d  | Day of month                   |  D  |                                |\r\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\r\n * |  m  | Minute                         |  M  | Month                          |\r\n * |  s  | Second                         |  S  | Fraction of second             |\r\n * |  y  | Year (abs)                     |  Y  |                                |\r\n *\r\n * Letters marked by * are not implemented but reserved by Unicode standard.\r\n */\r\n\r\nexport const lightFormatters = {\r\n  // Year\r\n  y(date, token) {\r\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\r\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\r\n    // |----------|-------|----|-------|-------|-------|\r\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\r\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\r\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\r\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\r\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\r\n\r\n    const signedYear = date.getFullYear();\r\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\r\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\r\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\r\n  },\r\n\r\n  // Month\r\n  M(date, token) {\r\n    const month = date.getMonth();\r\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\r\n  },\r\n\r\n  // Day of the month\r\n  d(date, token) {\r\n    return addLeadingZeros(date.getDate(), token.length);\r\n  },\r\n\r\n  // AM or PM\r\n  a(date, token) {\r\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\r\n\r\n    switch (token) {\r\n      case \"a\":\r\n      case \"aa\":\r\n        return dayPeriodEnumValue.toUpperCase();\r\n      case \"aaa\":\r\n        return dayPeriodEnumValue;\r\n      case \"aaaaa\":\r\n        return dayPeriodEnumValue[0];\r\n      case \"aaaa\":\r\n      default:\r\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\r\n    }\r\n  },\r\n\r\n  // Hour [1-12]\r\n  h(date, token) {\r\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\r\n  },\r\n\r\n  // Hour [0-23]\r\n  H(date, token) {\r\n    return addLeadingZeros(date.getHours(), token.length);\r\n  },\r\n\r\n  // Minute\r\n  m(date, token) {\r\n    return addLeadingZeros(date.getMinutes(), token.length);\r\n  },\r\n\r\n  // Second\r\n  s(date, token) {\r\n    return addLeadingZeros(date.getSeconds(), token.length);\r\n  },\r\n\r\n  // Fraction of second\r\n  S(date, token) {\r\n    const numberOfDigits = token.length;\r\n    const milliseconds = date.getMilliseconds();\r\n    const fractionalSeconds = Math.trunc(\r\n      milliseconds * Math.pow(10, numberOfDigits - 3),\r\n    );\r\n    return addLeadingZeros(fractionalSeconds, token.length);\r\n  },\r\n};\r\n", "import { getDayOfYear } from \"../../getDayOfYear.mjs\";\r\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\r\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\r\nimport { getWeek } from \"../../getWeek.mjs\";\r\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\r\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\r\nimport { lightFormatters } from \"./lightFormatters.mjs\";\r\n\r\nconst dayPeriodEnum = {\r\n  am: \"am\",\r\n  pm: \"pm\",\r\n  midnight: \"midnight\",\r\n  noon: \"noon\",\r\n  morning: \"morning\",\r\n  afternoon: \"afternoon\",\r\n  evening: \"evening\",\r\n  night: \"night\",\r\n};\r\n\r\n/*\r\n * |     | Unit                           |     | Unit                           |\r\n * |-----|--------------------------------|-----|--------------------------------|\r\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\r\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\r\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\r\n * |  d  | Day of month                   |  D  | Day of year                    |\r\n * |  e  | Local day of week              |  E  | Day of week                    |\r\n * |  f  |                                |  F* | Day of week in month           |\r\n * |  g* | Modified Julian day            |  G  | Era                            |\r\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\r\n * |  i! | ISO day of week                |  I! | ISO week of year               |\r\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\r\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\r\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\r\n * |  m  | Minute                         |  M  | Month                          |\r\n * |  n  |                                |  N  |                                |\r\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\r\n * |  p! | Long localized time            |  P! | Long localized date            |\r\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\r\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\r\n * |  s  | Second                         |  S  | Fraction of second             |\r\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\r\n * |  u  | Extended year                  |  U* | Cyclic year                    |\r\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\r\n * |  w  | Local week of year             |  W* | Week of month                  |\r\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\r\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\r\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\r\n *\r\n * Letters marked by * are not implemented but reserved by Unicode standard.\r\n *\r\n * Letters marked by ! are non-standard, but implemented by date-fns:\r\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\r\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\r\n *   i.e. 7 for Sunday, 1 for Monday, etc.\r\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\r\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\r\n *   `R` is supposed to be used in conjunction with `I` and `i`\r\n *   for universal ISO week-numbering date, whereas\r\n *   `Y` is supposed to be used in conjunction with `w` and `e`\r\n *   for week-numbering date specific to the locale.\r\n * - `P` is long localized date format\r\n * - `p` is long localized time format\r\n */\r\n\r\nexport const formatters = {\r\n  // Era\r\n  G: function (date, token, localize) {\r\n    const era = date.getFullYear() > 0 ? 1 : 0;\r\n    switch (token) {\r\n      // AD, BC\r\n      case \"G\":\r\n      case \"GG\":\r\n      case \"GGG\":\r\n        return localize.era(era, { width: \"abbreviated\" });\r\n      // A, B\r\n      case \"GGGGG\":\r\n        return localize.era(era, { width: \"narrow\" });\r\n      // Anno Domini, Before Christ\r\n      case \"GGGG\":\r\n      default:\r\n        return localize.era(era, { width: \"wide\" });\r\n    }\r\n  },\r\n\r\n  // Year\r\n  y: function (date, token, localize) {\r\n    // Ordinal number\r\n    if (token === \"yo\") {\r\n      const signedYear = date.getFullYear();\r\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\r\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\r\n      return localize.ordinalNumber(year, { unit: \"year\" });\r\n    }\r\n\r\n    return lightFormatters.y(date, token);\r\n  },\r\n\r\n  // Local week-numbering year\r\n  Y: function (date, token, localize, options) {\r\n    const signedWeekYear = getWeekYear(date, options);\r\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\r\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\r\n\r\n    // Two digit year\r\n    if (token === \"YY\") {\r\n      const twoDigitYear = weekYear % 100;\r\n      return addLeadingZeros(twoDigitYear, 2);\r\n    }\r\n\r\n    // Ordinal number\r\n    if (token === \"Yo\") {\r\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\r\n    }\r\n\r\n    // Padding\r\n    return addLeadingZeros(weekYear, token.length);\r\n  },\r\n\r\n  // ISO week-numbering year\r\n  R: function (date, token) {\r\n    const isoWeekYear = getISOWeekYear(date);\r\n\r\n    // Padding\r\n    return addLeadingZeros(isoWeekYear, token.length);\r\n  },\r\n\r\n  // Extended year. This is a single number designating the year of this calendar system.\r\n  // The main difference between `y` and `u` localizers are B.C. years:\r\n  // | Year | `y` | `u` |\r\n  // |------|-----|-----|\r\n  // | AC 1 |   1 |   1 |\r\n  // | BC 1 |   1 |   0 |\r\n  // | BC 2 |   2 |  -1 |\r\n  // Also `yy` always returns the last two digits of a year,\r\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\r\n  u: function (date, token) {\r\n    const year = date.getFullYear();\r\n    return addLeadingZeros(year, token.length);\r\n  },\r\n\r\n  // Quarter\r\n  Q: function (date, token, localize) {\r\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\r\n    switch (token) {\r\n      // 1, 2, 3, 4\r\n      case \"Q\":\r\n        return String(quarter);\r\n      // 01, 02, 03, 04\r\n      case \"QQ\":\r\n        return addLeadingZeros(quarter, 2);\r\n      // 1st, 2nd, 3rd, 4th\r\n      case \"Qo\":\r\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\r\n      // Q1, Q2, Q3, Q4\r\n      case \"QQQ\":\r\n        return localize.quarter(quarter, {\r\n          width: \"abbreviated\",\r\n          context: \"formatting\",\r\n        });\r\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\r\n      case \"QQQQQ\":\r\n        return localize.quarter(quarter, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      // 1st quarter, 2nd quarter, ...\r\n      case \"QQQQ\":\r\n      default:\r\n        return localize.quarter(quarter, {\r\n          width: \"wide\",\r\n          context: \"formatting\",\r\n        });\r\n    }\r\n  },\r\n\r\n  // Stand-alone quarter\r\n  q: function (date, token, localize) {\r\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\r\n    switch (token) {\r\n      // 1, 2, 3, 4\r\n      case \"q\":\r\n        return String(quarter);\r\n      // 01, 02, 03, 04\r\n      case \"qq\":\r\n        return addLeadingZeros(quarter, 2);\r\n      // 1st, 2nd, 3rd, 4th\r\n      case \"qo\":\r\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\r\n      // Q1, Q2, Q3, Q4\r\n      case \"qqq\":\r\n        return localize.quarter(quarter, {\r\n          width: \"abbreviated\",\r\n          context: \"standalone\",\r\n        });\r\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\r\n      case \"qqqqq\":\r\n        return localize.quarter(quarter, {\r\n          width: \"narrow\",\r\n          context: \"standalone\",\r\n        });\r\n      // 1st quarter, 2nd quarter, ...\r\n      case \"qqqq\":\r\n      default:\r\n        return localize.quarter(quarter, {\r\n          width: \"wide\",\r\n          context: \"standalone\",\r\n        });\r\n    }\r\n  },\r\n\r\n  // Month\r\n  M: function (date, token, localize) {\r\n    const month = date.getMonth();\r\n    switch (token) {\r\n      case \"M\":\r\n      case \"MM\":\r\n        return lightFormatters.M(date, token);\r\n      // 1st, 2nd, ..., 12th\r\n      case \"Mo\":\r\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\r\n      // Jan, Feb, ..., Dec\r\n      case \"MMM\":\r\n        return localize.month(month, {\r\n          width: \"abbreviated\",\r\n          context: \"formatting\",\r\n        });\r\n      // J, F, ..., D\r\n      case \"MMMMM\":\r\n        return localize.month(month, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      // January, February, ..., December\r\n      case \"MMMM\":\r\n      default:\r\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\r\n    }\r\n  },\r\n\r\n  // Stand-alone month\r\n  L: function (date, token, localize) {\r\n    const month = date.getMonth();\r\n    switch (token) {\r\n      // 1, 2, ..., 12\r\n      case \"L\":\r\n        return String(month + 1);\r\n      // 01, 02, ..., 12\r\n      case \"LL\":\r\n        return addLeadingZeros(month + 1, 2);\r\n      // 1st, 2nd, ..., 12th\r\n      case \"Lo\":\r\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\r\n      // Jan, Feb, ..., Dec\r\n      case \"LLL\":\r\n        return localize.month(month, {\r\n          width: \"abbreviated\",\r\n          context: \"standalone\",\r\n        });\r\n      // J, F, ..., D\r\n      case \"LLLLL\":\r\n        return localize.month(month, {\r\n          width: \"narrow\",\r\n          context: \"standalone\",\r\n        });\r\n      // January, February, ..., December\r\n      case \"LLLL\":\r\n      default:\r\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\r\n    }\r\n  },\r\n\r\n  // Local week of year\r\n  w: function (date, token, localize, options) {\r\n    const week = getWeek(date, options);\r\n\r\n    if (token === \"wo\") {\r\n      return localize.ordinalNumber(week, { unit: \"week\" });\r\n    }\r\n\r\n    return addLeadingZeros(week, token.length);\r\n  },\r\n\r\n  // ISO week of year\r\n  I: function (date, token, localize) {\r\n    const isoWeek = getISOWeek(date);\r\n\r\n    if (token === \"Io\") {\r\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\r\n    }\r\n\r\n    return addLeadingZeros(isoWeek, token.length);\r\n  },\r\n\r\n  // Day of the month\r\n  d: function (date, token, localize) {\r\n    if (token === \"do\") {\r\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\r\n    }\r\n\r\n    return lightFormatters.d(date, token);\r\n  },\r\n\r\n  // Day of year\r\n  D: function (date, token, localize) {\r\n    const dayOfYear = getDayOfYear(date);\r\n\r\n    if (token === \"Do\") {\r\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\r\n    }\r\n\r\n    return addLeadingZeros(dayOfYear, token.length);\r\n  },\r\n\r\n  // Day of week\r\n  E: function (date, token, localize) {\r\n    const dayOfWeek = date.getDay();\r\n    switch (token) {\r\n      // Tue\r\n      case \"E\":\r\n      case \"EE\":\r\n      case \"EEE\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"abbreviated\",\r\n          context: \"formatting\",\r\n        });\r\n      // T\r\n      case \"EEEEE\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      // Tu\r\n      case \"EEEEEE\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"short\",\r\n          context: \"formatting\",\r\n        });\r\n      // Tuesday\r\n      case \"EEEE\":\r\n      default:\r\n        return localize.day(dayOfWeek, {\r\n          width: \"wide\",\r\n          context: \"formatting\",\r\n        });\r\n    }\r\n  },\r\n\r\n  // Local day of week\r\n  e: function (date, token, localize, options) {\r\n    const dayOfWeek = date.getDay();\r\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\r\n    switch (token) {\r\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\r\n      case \"e\":\r\n        return String(localDayOfWeek);\r\n      // Padded numerical value\r\n      case \"ee\":\r\n        return addLeadingZeros(localDayOfWeek, 2);\r\n      // 1st, 2nd, ..., 7th\r\n      case \"eo\":\r\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\r\n      case \"eee\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"abbreviated\",\r\n          context: \"formatting\",\r\n        });\r\n      // T\r\n      case \"eeeee\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      // Tu\r\n      case \"eeeeee\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"short\",\r\n          context: \"formatting\",\r\n        });\r\n      // Tuesday\r\n      case \"eeee\":\r\n      default:\r\n        return localize.day(dayOfWeek, {\r\n          width: \"wide\",\r\n          context: \"formatting\",\r\n        });\r\n    }\r\n  },\r\n\r\n  // Stand-alone local day of week\r\n  c: function (date, token, localize, options) {\r\n    const dayOfWeek = date.getDay();\r\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\r\n    switch (token) {\r\n      // Numerical value (same as in `e`)\r\n      case \"c\":\r\n        return String(localDayOfWeek);\r\n      // Padded numerical value\r\n      case \"cc\":\r\n        return addLeadingZeros(localDayOfWeek, token.length);\r\n      // 1st, 2nd, ..., 7th\r\n      case \"co\":\r\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\r\n      case \"ccc\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"abbreviated\",\r\n          context: \"standalone\",\r\n        });\r\n      // T\r\n      case \"ccccc\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"narrow\",\r\n          context: \"standalone\",\r\n        });\r\n      // Tu\r\n      case \"cccccc\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"short\",\r\n          context: \"standalone\",\r\n        });\r\n      // Tuesday\r\n      case \"cccc\":\r\n      default:\r\n        return localize.day(dayOfWeek, {\r\n          width: \"wide\",\r\n          context: \"standalone\",\r\n        });\r\n    }\r\n  },\r\n\r\n  // ISO day of week\r\n  i: function (date, token, localize) {\r\n    const dayOfWeek = date.getDay();\r\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\r\n    switch (token) {\r\n      // 2\r\n      case \"i\":\r\n        return String(isoDayOfWeek);\r\n      // 02\r\n      case \"ii\":\r\n        return addLeadingZeros(isoDayOfWeek, token.length);\r\n      // 2nd\r\n      case \"io\":\r\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\r\n      // Tue\r\n      case \"iii\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"abbreviated\",\r\n          context: \"formatting\",\r\n        });\r\n      // T\r\n      case \"iiiii\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      // Tu\r\n      case \"iiiiii\":\r\n        return localize.day(dayOfWeek, {\r\n          width: \"short\",\r\n          context: \"formatting\",\r\n        });\r\n      // Tuesday\r\n      case \"iiii\":\r\n      default:\r\n        return localize.day(dayOfWeek, {\r\n          width: \"wide\",\r\n          context: \"formatting\",\r\n        });\r\n    }\r\n  },\r\n\r\n  // AM or PM\r\n  a: function (date, token, localize) {\r\n    const hours = date.getHours();\r\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\r\n\r\n    switch (token) {\r\n      case \"a\":\r\n      case \"aa\":\r\n        return localize.dayPeriod(dayPeriodEnumValue, {\r\n          width: \"abbreviated\",\r\n          context: \"formatting\",\r\n        });\r\n      case \"aaa\":\r\n        return localize\r\n          .dayPeriod(dayPeriodEnumValue, {\r\n            width: \"abbreviated\",\r\n            context: \"formatting\",\r\n          })\r\n          .toLowerCase();\r\n      case \"aaaaa\":\r\n        return localize.dayPeriod(dayPeriodEnumValue, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      case \"aaaa\":\r\n      default:\r\n        return localize.dayPeriod(dayPeriodEnumValue, {\r\n          width: \"wide\",\r\n          context: \"formatting\",\r\n        });\r\n    }\r\n  },\r\n\r\n  // AM, PM, midnight, noon\r\n  b: function (date, token, localize) {\r\n    const hours = date.getHours();\r\n    let dayPeriodEnumValue;\r\n    if (hours === 12) {\r\n      dayPeriodEnumValue = dayPeriodEnum.noon;\r\n    } else if (hours === 0) {\r\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\r\n    } else {\r\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\r\n    }\r\n\r\n    switch (token) {\r\n      case \"b\":\r\n      case \"bb\":\r\n        return localize.dayPeriod(dayPeriodEnumValue, {\r\n          width: \"abbreviated\",\r\n          context: \"formatting\",\r\n        });\r\n      case \"bbb\":\r\n        return localize\r\n          .dayPeriod(dayPeriodEnumValue, {\r\n            width: \"abbreviated\",\r\n            context: \"formatting\",\r\n          })\r\n          .toLowerCase();\r\n      case \"bbbbb\":\r\n        return localize.dayPeriod(dayPeriodEnumValue, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      case \"bbbb\":\r\n      default:\r\n        return localize.dayPeriod(dayPeriodEnumValue, {\r\n          width: \"wide\",\r\n          context: \"formatting\",\r\n        });\r\n    }\r\n  },\r\n\r\n  // in the morning, in the afternoon, in the evening, at night\r\n  B: function (date, token, localize) {\r\n    const hours = date.getHours();\r\n    let dayPeriodEnumValue;\r\n    if (hours >= 17) {\r\n      dayPeriodEnumValue = dayPeriodEnum.evening;\r\n    } else if (hours >= 12) {\r\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\r\n    } else if (hours >= 4) {\r\n      dayPeriodEnumValue = dayPeriodEnum.morning;\r\n    } else {\r\n      dayPeriodEnumValue = dayPeriodEnum.night;\r\n    }\r\n\r\n    switch (token) {\r\n      case \"B\":\r\n      case \"BB\":\r\n      case \"BBB\":\r\n        return localize.dayPeriod(dayPeriodEnumValue, {\r\n          width: \"abbreviated\",\r\n          context: \"formatting\",\r\n        });\r\n      case \"BBBBB\":\r\n        return localize.dayPeriod(dayPeriodEnumValue, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      case \"BBBB\":\r\n      default:\r\n        return localize.dayPeriod(dayPeriodEnumValue, {\r\n          width: \"wide\",\r\n          context: \"formatting\",\r\n        });\r\n    }\r\n  },\r\n\r\n  // Hour [1-12]\r\n  h: function (date, token, localize) {\r\n    if (token === \"ho\") {\r\n      let hours = date.getHours() % 12;\r\n      if (hours === 0) hours = 12;\r\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\r\n    }\r\n\r\n    return lightFormatters.h(date, token);\r\n  },\r\n\r\n  // Hour [0-23]\r\n  H: function (date, token, localize) {\r\n    if (token === \"Ho\") {\r\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\r\n    }\r\n\r\n    return lightFormatters.H(date, token);\r\n  },\r\n\r\n  // Hour [0-11]\r\n  K: function (date, token, localize) {\r\n    const hours = date.getHours() % 12;\r\n\r\n    if (token === \"Ko\") {\r\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\r\n    }\r\n\r\n    return addLeadingZeros(hours, token.length);\r\n  },\r\n\r\n  // Hour [1-24]\r\n  k: function (date, token, localize) {\r\n    let hours = date.getHours();\r\n    if (hours === 0) hours = 24;\r\n\r\n    if (token === \"ko\") {\r\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\r\n    }\r\n\r\n    return addLeadingZeros(hours, token.length);\r\n  },\r\n\r\n  // Minute\r\n  m: function (date, token, localize) {\r\n    if (token === \"mo\") {\r\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\r\n    }\r\n\r\n    return lightFormatters.m(date, token);\r\n  },\r\n\r\n  // Second\r\n  s: function (date, token, localize) {\r\n    if (token === \"so\") {\r\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\r\n    }\r\n\r\n    return lightFormatters.s(date, token);\r\n  },\r\n\r\n  // Fraction of second\r\n  S: function (date, token) {\r\n    return lightFormatters.S(date, token);\r\n  },\r\n\r\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\r\n  X: function (date, token, _localize) {\r\n    const timezoneOffset = date.getTimezoneOffset();\r\n\r\n    if (timezoneOffset === 0) {\r\n      return \"Z\";\r\n    }\r\n\r\n    switch (token) {\r\n      // Hours and optional minutes\r\n      case \"X\":\r\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\r\n\r\n      // Hours, minutes and optional seconds without `:` delimiter\r\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\r\n      // so this token always has the same output as `XX`\r\n      case \"XXXX\":\r\n      case \"XX\": // Hours and minutes without `:` delimiter\r\n        return formatTimezone(timezoneOffset);\r\n\r\n      // Hours, minutes and optional seconds with `:` delimiter\r\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\r\n      // so this token always has the same output as `XXX`\r\n      case \"XXXXX\":\r\n      case \"XXX\": // Hours and minutes with `:` delimiter\r\n      default:\r\n        return formatTimezone(timezoneOffset, \":\");\r\n    }\r\n  },\r\n\r\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\r\n  x: function (date, token, _localize) {\r\n    const timezoneOffset = date.getTimezoneOffset();\r\n\r\n    switch (token) {\r\n      // Hours and optional minutes\r\n      case \"x\":\r\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\r\n\r\n      // Hours, minutes and optional seconds without `:` delimiter\r\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\r\n      // so this token always has the same output as `xx`\r\n      case \"xxxx\":\r\n      case \"xx\": // Hours and minutes without `:` delimiter\r\n        return formatTimezone(timezoneOffset);\r\n\r\n      // Hours, minutes and optional seconds with `:` delimiter\r\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\r\n      // so this token always has the same output as `xxx`\r\n      case \"xxxxx\":\r\n      case \"xxx\": // Hours and minutes with `:` delimiter\r\n      default:\r\n        return formatTimezone(timezoneOffset, \":\");\r\n    }\r\n  },\r\n\r\n  // Timezone (GMT)\r\n  O: function (date, token, _localize) {\r\n    const timezoneOffset = date.getTimezoneOffset();\r\n\r\n    switch (token) {\r\n      // Short\r\n      case \"O\":\r\n      case \"OO\":\r\n      case \"OOO\":\r\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\r\n      // Long\r\n      case \"OOOO\":\r\n      default:\r\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\r\n    }\r\n  },\r\n\r\n  // Timezone (specific non-location)\r\n  z: function (date, token, _localize) {\r\n    const timezoneOffset = date.getTimezoneOffset();\r\n\r\n    switch (token) {\r\n      // Short\r\n      case \"z\":\r\n      case \"zz\":\r\n      case \"zzz\":\r\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\r\n      // Long\r\n      case \"zzzz\":\r\n      default:\r\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\r\n    }\r\n  },\r\n\r\n  // Seconds timestamp\r\n  t: function (date, token, _localize) {\r\n    const timestamp = Math.trunc(date.getTime() / 1000);\r\n    return addLeadingZeros(timestamp, token.length);\r\n  },\r\n\r\n  // Milliseconds timestamp\r\n  T: function (date, token, _localize) {\r\n    const timestamp = date.getTime();\r\n    return addLeadingZeros(timestamp, token.length);\r\n  },\r\n};\r\n\r\nfunction formatTimezoneShort(offset, delimiter = \"\") {\r\n  const sign = offset > 0 ? \"-\" : \"+\";\r\n  const absOffset = Math.abs(offset);\r\n  const hours = Math.trunc(absOffset / 60);\r\n  const minutes = absOffset % 60;\r\n  if (minutes === 0) {\r\n    return sign + String(hours);\r\n  }\r\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\r\n}\r\n\r\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\r\n  if (offset % 60 === 0) {\r\n    const sign = offset > 0 ? \"-\" : \"+\";\r\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\r\n  }\r\n  return formatTimezone(offset, delimiter);\r\n}\r\n\r\nfunction formatTimezone(offset, delimiter = \"\") {\r\n  const sign = offset > 0 ? \"-\" : \"+\";\r\n  const absOffset = Math.abs(offset);\r\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\r\n  const minutes = addLeadingZeros(absOffset % 60, 2);\r\n  return sign + hours + delimiter + minutes;\r\n}\r\n", "const dateLongFormatter = (pattern, formatLong) => {\r\n  switch (pattern) {\r\n    case \"P\":\r\n      return formatLong.date({ width: \"short\" });\r\n    case \"PP\":\r\n      return formatLong.date({ width: \"medium\" });\r\n    case \"PPP\":\r\n      return formatLong.date({ width: \"long\" });\r\n    case \"PPPP\":\r\n    default:\r\n      return formatLong.date({ width: \"full\" });\r\n  }\r\n};\r\n\r\nconst timeLongFormatter = (pattern, formatLong) => {\r\n  switch (pattern) {\r\n    case \"p\":\r\n      return formatLong.time({ width: \"short\" });\r\n    case \"pp\":\r\n      return formatLong.time({ width: \"medium\" });\r\n    case \"ppp\":\r\n      return formatLong.time({ width: \"long\" });\r\n    case \"pppp\":\r\n    default:\r\n      return formatLong.time({ width: \"full\" });\r\n  }\r\n};\r\n\r\nconst dateTimeLongFormatter = (pattern, formatLong) => {\r\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\r\n  const datePattern = matchResult[1];\r\n  const timePattern = matchResult[2];\r\n\r\n  if (!timePattern) {\r\n    return dateLongFormatter(pattern, formatLong);\r\n  }\r\n\r\n  let dateTimeFormat;\r\n\r\n  switch (datePattern) {\r\n    case \"P\":\r\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\r\n      break;\r\n    case \"PP\":\r\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\r\n      break;\r\n    case \"PPP\":\r\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\r\n      break;\r\n    case \"PPPP\":\r\n    default:\r\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\r\n      break;\r\n  }\r\n\r\n  return dateTimeFormat\r\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\r\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\r\n};\r\n\r\nexport const longFormatters = {\r\n  p: timeLongFormatter,\r\n  P: dateTimeLongFormatter,\r\n};\r\n", "const dayOfYearTokenRE = /^D+$/;\r\nconst weekYearTokenRE = /^Y+$/;\r\n\r\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\r\n\r\nexport function isProtectedDayOfYearToken(token) {\r\n  return dayOfYearTokenRE.test(token);\r\n}\r\n\r\nexport function isProtectedWeekYearToken(token) {\r\n  return weekYearTokenRE.test(token);\r\n}\r\n\r\nexport function warnOrThrowProtectedError(token, format, input) {\r\n  const _message = message(token, format, input);\r\n  console.warn(_message);\r\n  if (throwTokens.includes(token)) throw new RangeError(_message);\r\n}\r\n\r\nfunction message(token, format, input) {\r\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\r\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\r\n}\r\n", "/**\r\n * @name isDate\r\n * @category Common Helpers\r\n * @summary Is the given value a date?\r\n *\r\n * @description\r\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\r\n *\r\n * @param value - The value to check\r\n *\r\n * @returns True if the given value is a date\r\n *\r\n * @example\r\n * // For a valid date:\r\n * const result = isDate(new Date())\r\n * //=> true\r\n *\r\n * @example\r\n * // For an invalid date:\r\n * const result = isDate(new Date(NaN))\r\n * //=> true\r\n *\r\n * @example\r\n * // For some value:\r\n * const result = isDate('2014-02-31')\r\n * //=> false\r\n *\r\n * @example\r\n * // For an object:\r\n * const result = isDate({})\r\n * //=> false\r\n */\r\nexport function isDate(value) {\r\n  return (\r\n    value instanceof Date ||\r\n    (typeof value === \"object\" &&\r\n      Object.prototype.toString.call(value) === \"[object Date]\")\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isDate;\r\n", "import { isDate } from \"./isDate.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name isValid\r\n * @category Common Helpers\r\n * @summary Is the given date valid?\r\n *\r\n * @description\r\n * Returns false if argument is Invalid Date and true otherwise.\r\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\r\n * Invalid Date is a Date, whose time value is NaN.\r\n *\r\n * Time value of Date: http://es5.github.io/#x15.9.1.1\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to check\r\n *\r\n * @returns The date is valid\r\n *\r\n * @example\r\n * // For the valid date:\r\n * const result = isValid(new Date(2014, 1, 31))\r\n * //=> true\r\n *\r\n * @example\r\n * // For the value, convertable into a date:\r\n * const result = isValid(1393804800000)\r\n * //=> true\r\n *\r\n * @example\r\n * // For the invalid date:\r\n * const result = isValid(new Date(''))\r\n * //=> false\r\n */\r\nexport function isValid(date) {\r\n  if (!isDate(date) && typeof date !== \"number\") {\r\n    return false;\r\n  }\r\n  const _date = toDate(date);\r\n  return !isNaN(Number(_date));\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isValid;\r\n", "import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\r\nimport { formatters } from \"./_lib/format/formatters.mjs\";\r\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\r\nimport {\r\n  isProtectedDayOfYearToken,\r\n  isProtectedWeekYearToken,\r\n  warnOrThrowProtectedError,\r\n} from \"./_lib/protectedTokens.mjs\";\r\nimport { isValid } from \"./isValid.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n// Rexports of internal for libraries to use.\r\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\r\nexport { formatters, longFormatters };\r\n\r\n// This RegExp consists of three parts separated by `|`:\r\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\r\n//   (one of the certain letters followed by `o`)\r\n// - (\\w)\\1* matches any sequences of the same letter\r\n// - '' matches two quote characters in a row\r\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\r\n//   except a single quote symbol, which ends the sequence.\r\n//   Two quote characters do not end the sequence.\r\n//   If there is no matching single quote\r\n//   then the sequence will continue until the end of the string.\r\n// - . matches any single character unmatched by previous parts of the RegExps\r\nconst formattingTokensRegExp =\r\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\r\n\r\n// This RegExp catches symbols escaped by quotes, and also\r\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\r\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\r\n\r\nconst escapedStringRegExp = /^'([^]*?)'?$/;\r\nconst doubleQuoteRegExp = /''/g;\r\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\r\n\r\nexport { format as formatDate };\r\n\r\n/**\r\n * The {@link format} function options.\r\n */\r\n\r\n/**\r\n * @name format\r\n * @alias formatDate\r\n * @category Common Helpers\r\n * @summary Format the date.\r\n *\r\n * @description\r\n * Return the formatted date string in the given format. The result may vary by locale.\r\n *\r\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\r\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n *\r\n * The characters wrapped between two single quotes characters (') are escaped.\r\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\r\n * (see the last example)\r\n *\r\n * Format of the string is based on Unicode Technical Standard #35:\r\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * with a few additions (see note 7 below the table).\r\n *\r\n * Accepted patterns:\r\n * | Unit                            | Pattern | Result examples                   | Notes |\r\n * |---------------------------------|---------|-----------------------------------|-------|\r\n * | Era                             | G..GGG  | AD, BC                            |       |\r\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\r\n * |                                 | GGGGG   | A, B                              |       |\r\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\r\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\r\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\r\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\r\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\r\n * |                                 | yyyyy   | ...                               | 3,5   |\r\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\r\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\r\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\r\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\r\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\r\n * |                                 | YYYYY   | ...                               | 3,5   |\r\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\r\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\r\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\r\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\r\n * |                                 | RRRRR   | ...                               | 3,5,7 |\r\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\r\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\r\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\r\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\r\n * |                                 | uuuuu   | ...                               | 3,5   |\r\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\r\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\r\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\r\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\r\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\r\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\r\n * |                                 | qq      | 01, 02, 03, 04                    |       |\r\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\r\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\r\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\r\n * |                                 | MM      | 01, 02, ..., 12                   |       |\r\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\r\n * |                                 | MMMM    | January, February, ..., December  | 2     |\r\n * |                                 | MMMMM   | J, F, ..., D                      |       |\r\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\r\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\r\n * |                                 | LL      | 01, 02, ..., 12                   |       |\r\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\r\n * |                                 | LLLL    | January, February, ..., December  | 2     |\r\n * |                                 | LLLLL   | J, F, ..., D                      |       |\r\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\r\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\r\n * |                                 | ww      | 01, 02, ..., 53                   |       |\r\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\r\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\r\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\r\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\r\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\r\n * |                                 | dd      | 01, 02, ..., 31                   |       |\r\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\r\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\r\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\r\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\r\n * |                                 | DDDD    | ...                               | 3     |\r\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\r\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\r\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\r\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\r\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\r\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\r\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\r\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\r\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\r\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\r\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\r\n * |                                 | ee      | 02, 03, ..., 01                   |       |\r\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\r\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\r\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\r\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\r\n * |                                 | cc      | 02, 03, ..., 01                   |       |\r\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\r\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\r\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\r\n * | AM, PM                          | a..aa   | AM, PM                            |       |\r\n * |                                 | aaa     | am, pm                            |       |\r\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\r\n * |                                 | aaaaa   | a, p                              |       |\r\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\r\n * |                                 | bbb     | am, pm, noon, midnight            |       |\r\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\r\n * |                                 | bbbbb   | a, p, n, mi                       |       |\r\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\r\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\r\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\r\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\r\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\r\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\r\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\r\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\r\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\r\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\r\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\r\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\r\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\r\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\r\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\r\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\r\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\r\n * |                                 | mm      | 00, 01, ..., 59                   |       |\r\n * | Second                          | s       | 0, 1, ..., 59                     |       |\r\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\r\n * |                                 | ss      | 00, 01, ..., 59                   |       |\r\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\r\n * |                                 | SS      | 00, 01, ..., 99                   |       |\r\n * |                                 | SSS     | 000, 001, ..., 999                |       |\r\n * |                                 | SSSS    | ...                               | 3     |\r\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\r\n * |                                 | XX      | -0800, +0530, Z                   |       |\r\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\r\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\r\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\r\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\r\n * |                                 | xx      | -0800, +0530, +0000               |       |\r\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\r\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\r\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\r\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\r\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\r\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\r\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\r\n * | Seconds timestamp               | t       | 512969520                         | 7     |\r\n * |                                 | tt      | ...                               | 3,7   |\r\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\r\n * |                                 | TT      | ...                               | 3,7   |\r\n * | Long localized date             | P       | 04/29/1453                        | 7     |\r\n * |                                 | PP      | Apr 29, 1453                      | 7     |\r\n * |                                 | PPP     | April 29th, 1453                  | 7     |\r\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\r\n * | Long localized time             | p       | 12:00 AM                          | 7     |\r\n * |                                 | pp      | 12:00:00 AM                       | 7     |\r\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\r\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\r\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\r\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\r\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\r\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\r\n * Notes:\r\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\r\n *    are the same as \"stand-alone\" units, but are different in some languages.\r\n *    \"Formatting\" units are declined according to the rules of the language\r\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\r\n *\r\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\r\n *    the single quote characters (see below).\r\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\r\n *    the output will be the same as default pattern for this unit, usually\r\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\r\n *    are marked with \"2\" in the last column of the table.\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\r\n *\r\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\r\n *    The output will be padded with zeros to match the length of the pattern.\r\n *\r\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\r\n *\r\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\r\n *    These tokens represent the shortest form of the quarter.\r\n *\r\n * 5. The main difference between `y` and `u` patterns are B.C. years:\r\n *\r\n *    | Year | `y` | `u` |\r\n *    |------|-----|-----|\r\n *    | AC 1 |   1 |   1 |\r\n *    | BC 1 |   1 |   0 |\r\n *    | BC 2 |   2 |  -1 |\r\n *\r\n *    Also `yy` always returns the last two digits of a year,\r\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\r\n *\r\n *    | Year | `yy` | `uu` |\r\n *    |------|------|------|\r\n *    | 1    |   01 |   01 |\r\n *    | 14   |   14 |   14 |\r\n *    | 376  |   76 |  376 |\r\n *    | 1453 |   53 | 1453 |\r\n *\r\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\r\n *    except local week-numbering years are dependent on `options.weekStartsOn`\r\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\r\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\r\n *\r\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\r\n *    so right now these tokens fall back to GMT timezones.\r\n *\r\n * 7. These patterns are not in the Unicode Technical Standard #35:\r\n *    - `i`: ISO day of week\r\n *    - `I`: ISO week of year\r\n *    - `R`: ISO week-numbering year\r\n *    - `t`: seconds timestamp\r\n *    - `T`: milliseconds timestamp\r\n *    - `o`: ordinal number modifier\r\n *    - `P`: long localized date\r\n *    - `p`: long localized time\r\n *\r\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\r\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n *\r\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\r\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The original date\r\n * @param format - The string of tokens\r\n * @param options - An object with options\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n * @throws `options.locale` must contain `localize` property\r\n * @throws `options.locale` must contain `formatLong` property\r\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n * @throws format string contains an unescaped latin alphabet character\r\n *\r\n * @example\r\n * // Represent 11 February 2014 in middle-endian format:\r\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\r\n * //=> '02/11/2014'\r\n *\r\n * @example\r\n * // Represent 2 July 2014 in Esperanto:\r\n * import { eoLocale } from 'date-fns/locale/eo'\r\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\r\n *   locale: eoLocale\r\n * })\r\n * //=> '2-a de julio 2014'\r\n *\r\n * @example\r\n * // Escape string by single quote characters:\r\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\r\n * //=> \"3 o'clock\"\r\n */\r\nexport function format(date, formatStr, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\r\n\r\n  const firstWeekContainsDate =\r\n    options?.firstWeekContainsDate ??\r\n    options?.locale?.options?.firstWeekContainsDate ??\r\n    defaultOptions.firstWeekContainsDate ??\r\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\r\n    1;\r\n\r\n  const weekStartsOn =\r\n    options?.weekStartsOn ??\r\n    options?.locale?.options?.weekStartsOn ??\r\n    defaultOptions.weekStartsOn ??\r\n    defaultOptions.locale?.options?.weekStartsOn ??\r\n    0;\r\n\r\n  const originalDate = toDate(date);\r\n\r\n  if (!isValid(originalDate)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  let parts = formatStr\r\n    .match(longFormattingTokensRegExp)\r\n    .map((substring) => {\r\n      const firstCharacter = substring[0];\r\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\r\n        const longFormatter = longFormatters[firstCharacter];\r\n        return longFormatter(substring, locale.formatLong);\r\n      }\r\n      return substring;\r\n    })\r\n    .join(\"\")\r\n    .match(formattingTokensRegExp)\r\n    .map((substring) => {\r\n      // Replace two single quote characters with one single quote character\r\n      if (substring === \"''\") {\r\n        return { isToken: false, value: \"'\" };\r\n      }\r\n\r\n      const firstCharacter = substring[0];\r\n      if (firstCharacter === \"'\") {\r\n        return { isToken: false, value: cleanEscapedString(substring) };\r\n      }\r\n\r\n      if (formatters[firstCharacter]) {\r\n        return { isToken: true, value: substring };\r\n      }\r\n\r\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\r\n        throw new RangeError(\r\n          \"Format string contains an unescaped latin alphabet character `\" +\r\n            firstCharacter +\r\n            \"`\",\r\n        );\r\n      }\r\n\r\n      return { isToken: false, value: substring };\r\n    });\r\n\r\n  // invoke localize preprocessor (only for french locales at the moment)\r\n  if (locale.localize.preprocessor) {\r\n    parts = locale.localize.preprocessor(originalDate, parts);\r\n  }\r\n\r\n  const formatterOptions = {\r\n    firstWeekContainsDate,\r\n    weekStartsOn,\r\n    locale,\r\n  };\r\n\r\n  return parts\r\n    .map((part) => {\r\n      if (!part.isToken) return part.value;\r\n\r\n      const token = part.value;\r\n\r\n      if (\r\n        (!options?.useAdditionalWeekYearTokens &&\r\n          isProtectedWeekYearToken(token)) ||\r\n        (!options?.useAdditionalDayOfYearTokens &&\r\n          isProtectedDayOfYearToken(token))\r\n      ) {\r\n        warnOrThrowProtectedError(token, formatStr, String(date));\r\n      }\r\n\r\n      const formatter = formatters[token[0]];\r\n      return formatter(originalDate, token, locale.localize, formatterOptions);\r\n    })\r\n    .join(\"\");\r\n}\r\n\r\nfunction cleanEscapedString(input) {\r\n  const matched = input.match(escapedStringRegExp);\r\n\r\n  if (!matched) {\r\n    return input;\r\n  }\r\n\r\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default format;\r\n"],
  "mappings": "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",
  "names": ["format", "defaultOptions", "defaultOptions", "defaultOptions", "localize", "formatLong", "format", "defaultOptions"]
}
